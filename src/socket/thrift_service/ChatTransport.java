/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package socket.thrift_service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-01-13")
public class ChatTransport {

  public interface Iface {

    public String getToken(String accessToken) throws TException;

    public ResponseObj sendVideo(int appCredentialId, String token, String socketResponse, ByteBuffer bufferedByte, String fileName) throws TException;

    public ResponseObj sendPicture(int appCredentialId, String token, String socketResponse, ByteBuffer bufferedByte, String fileName) throws TException;

    public ResponseObj sendVoice(int appCredentialId, String token, String socketResponse, ByteBuffer bufferedByte, String fileName) throws TException;

    public ResponseObj expireMyToken(int appCredentialId, String token) throws TException;

  }

  public interface AsyncIface {

    public void getToken(String accessToken, AsyncMethodCallback resultHandler) throws TException;

    public void sendVideo(int appCredentialId, String token, String socketResponse, ByteBuffer bufferedByte, String fileName, AsyncMethodCallback resultHandler) throws TException;

    public void sendPicture(int appCredentialId, String token, String socketResponse, ByteBuffer bufferedByte, String fileName, AsyncMethodCallback resultHandler) throws TException;

    public void sendVoice(int appCredentialId, String token, String socketResponse, ByteBuffer bufferedByte, String fileName, AsyncMethodCallback resultHandler) throws TException;

    public void expireMyToken(int appCredentialId, String token, AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String getToken(String accessToken) throws TException
    {
      send_getToken(accessToken);
      return recv_getToken();
    }

    public void send_getToken(String accessToken) throws TException
    {
      getToken_args args = new getToken_args();
      args.setAccessToken(accessToken);
      sendBase("getToken", args);
    }

    public String recv_getToken() throws TException
    {
      getToken_result result = new getToken_result();
      receiveBase(result, "getToken");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getToken failed: unknown result");
    }

    public ResponseObj sendVideo(int appCredentialId, String token, String socketResponse, ByteBuffer bufferedByte, String fileName) throws TException
    {
      send_sendVideo(appCredentialId, token, socketResponse, bufferedByte, fileName);
      return recv_sendVideo();
    }

    public void send_sendVideo(int appCredentialId, String token, String socketResponse, ByteBuffer bufferedByte, String fileName) throws TException
    {
      sendVideo_args args = new sendVideo_args();
      args.setAppCredentialId(appCredentialId);
      args.setToken(token);
      args.setSocketResponse(socketResponse);
      args.setBufferedByte(bufferedByte);
      args.setFileName(fileName);
      sendBase("sendVideo", args);
    }

    public ResponseObj recv_sendVideo() throws TException
    {
      sendVideo_result result = new sendVideo_result();
      receiveBase(result, "sendVideo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendVideo failed: unknown result");
    }

    public ResponseObj sendPicture(int appCredentialId, String token, String socketResponse, ByteBuffer bufferedByte, String fileName) throws TException
    {
      send_sendPicture(appCredentialId, token, socketResponse, bufferedByte, fileName);
      return recv_sendPicture();
    }

    public void send_sendPicture(int appCredentialId, String token, String socketResponse, ByteBuffer bufferedByte, String fileName) throws TException
    {
      sendPicture_args args = new sendPicture_args();
      args.setAppCredentialId(appCredentialId);
      args.setToken(token);
      args.setSocketResponse(socketResponse);
      args.setBufferedByte(bufferedByte);
      args.setFileName(fileName);
      sendBase("sendPicture", args);
    }

    public ResponseObj recv_sendPicture() throws TException
    {
      sendPicture_result result = new sendPicture_result();
      receiveBase(result, "sendPicture");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendPicture failed: unknown result");
    }

    public ResponseObj sendVoice(int appCredentialId, String token, String socketResponse, ByteBuffer bufferedByte, String fileName) throws TException
    {
      send_sendVoice(appCredentialId, token, socketResponse, bufferedByte, fileName);
      return recv_sendVoice();
    }

    public void send_sendVoice(int appCredentialId, String token, String socketResponse, ByteBuffer bufferedByte, String fileName) throws TException
    {
      sendVoice_args args = new sendVoice_args();
      args.setAppCredentialId(appCredentialId);
      args.setToken(token);
      args.setSocketResponse(socketResponse);
      args.setBufferedByte(bufferedByte);
      args.setFileName(fileName);
      sendBase("sendVoice", args);
    }

    public ResponseObj recv_sendVoice() throws TException
    {
      sendVoice_result result = new sendVoice_result();
      receiveBase(result, "sendVoice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendVoice failed: unknown result");
    }

    public ResponseObj expireMyToken(int appCredentialId, String token) throws TException
    {
      send_expireMyToken(appCredentialId, token);
      return recv_expireMyToken();
    }

    public void send_expireMyToken(int appCredentialId, String token) throws TException
    {
      expireMyToken_args args = new expireMyToken_args();
      args.setAppCredentialId(appCredentialId);
      args.setToken(token);
      sendBase("expireMyToken", args);
    }

    public ResponseObj recv_expireMyToken() throws TException
    {
      expireMyToken_result result = new expireMyToken_result();
      receiveBase(result, "expireMyToken");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "expireMyToken failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getToken(String accessToken, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getToken_call method_call = new getToken_call(accessToken, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getToken_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String accessToken;
      public getToken_call(String accessToken, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accessToken = accessToken;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getToken", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getToken_args args = new getToken_args();
        args.setAccessToken(accessToken);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getToken();
      }
    }

    public void sendVideo(int appCredentialId, String token, String socketResponse, ByteBuffer bufferedByte, String fileName, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      sendVideo_call method_call = new sendVideo_call(appCredentialId, token, socketResponse, bufferedByte, fileName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendVideo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int appCredentialId;
      private String token;
      private String socketResponse;
      private ByteBuffer bufferedByte;
      private String fileName;
      public sendVideo_call(int appCredentialId, String token, String socketResponse, ByteBuffer bufferedByte, String fileName, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appCredentialId = appCredentialId;
        this.token = token;
        this.socketResponse = socketResponse;
        this.bufferedByte = bufferedByte;
        this.fileName = fileName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendVideo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendVideo_args args = new sendVideo_args();
        args.setAppCredentialId(appCredentialId);
        args.setToken(token);
        args.setSocketResponse(socketResponse);
        args.setBufferedByte(bufferedByte);
        args.setFileName(fileName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResponseObj getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendVideo();
      }
    }

    public void sendPicture(int appCredentialId, String token, String socketResponse, ByteBuffer bufferedByte, String fileName, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      sendPicture_call method_call = new sendPicture_call(appCredentialId, token, socketResponse, bufferedByte, fileName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendPicture_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int appCredentialId;
      private String token;
      private String socketResponse;
      private ByteBuffer bufferedByte;
      private String fileName;
      public sendPicture_call(int appCredentialId, String token, String socketResponse, ByteBuffer bufferedByte, String fileName, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appCredentialId = appCredentialId;
        this.token = token;
        this.socketResponse = socketResponse;
        this.bufferedByte = bufferedByte;
        this.fileName = fileName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendPicture", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendPicture_args args = new sendPicture_args();
        args.setAppCredentialId(appCredentialId);
        args.setToken(token);
        args.setSocketResponse(socketResponse);
        args.setBufferedByte(bufferedByte);
        args.setFileName(fileName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResponseObj getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendPicture();
      }
    }

    public void sendVoice(int appCredentialId, String token, String socketResponse, ByteBuffer bufferedByte, String fileName, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      sendVoice_call method_call = new sendVoice_call(appCredentialId, token, socketResponse, bufferedByte, fileName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendVoice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int appCredentialId;
      private String token;
      private String socketResponse;
      private ByteBuffer bufferedByte;
      private String fileName;
      public sendVoice_call(int appCredentialId, String token, String socketResponse, ByteBuffer bufferedByte, String fileName, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appCredentialId = appCredentialId;
        this.token = token;
        this.socketResponse = socketResponse;
        this.bufferedByte = bufferedByte;
        this.fileName = fileName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendVoice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendVoice_args args = new sendVoice_args();
        args.setAppCredentialId(appCredentialId);
        args.setToken(token);
        args.setSocketResponse(socketResponse);
        args.setBufferedByte(bufferedByte);
        args.setFileName(fileName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResponseObj getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendVoice();
      }
    }

    public void expireMyToken(int appCredentialId, String token, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      expireMyToken_call method_call = new expireMyToken_call(appCredentialId, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class expireMyToken_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int appCredentialId;
      private String token;
      public expireMyToken_call(int appCredentialId, String token, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appCredentialId = appCredentialId;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("expireMyToken", org.apache.thrift.protocol.TMessageType.CALL, 0));
        expireMyToken_args args = new expireMyToken_args();
        args.setAppCredentialId(appCredentialId);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResponseObj getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_expireMyToken();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getToken", new getToken());
      processMap.put("sendVideo", new sendVideo());
      processMap.put("sendPicture", new sendPicture());
      processMap.put("sendVoice", new sendVoice());
      processMap.put("expireMyToken", new expireMyToken());
      return processMap;
    }

    public static class getToken<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getToken_args> {
      public getToken() {
        super("getToken");
      }

      public getToken_args getEmptyArgsInstance() {
        return new getToken_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getToken_result getResult(I iface, getToken_args args) throws TException {
        getToken_result result = new getToken_result();
        result.success = iface.getToken(args.accessToken);
        return result;
      }
    }

    public static class sendVideo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendVideo_args> {
      public sendVideo() {
        super("sendVideo");
      }

      public sendVideo_args getEmptyArgsInstance() {
        return new sendVideo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendVideo_result getResult(I iface, sendVideo_args args) throws TException {
        sendVideo_result result = new sendVideo_result();
        result.success = iface.sendVideo(args.appCredentialId, args.token, args.socketResponse, args.bufferedByte, args.fileName);
        return result;
      }
    }

    public static class sendPicture<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendPicture_args> {
      public sendPicture() {
        super("sendPicture");
      }

      public sendPicture_args getEmptyArgsInstance() {
        return new sendPicture_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendPicture_result getResult(I iface, sendPicture_args args) throws TException {
        sendPicture_result result = new sendPicture_result();
        result.success = iface.sendPicture(args.appCredentialId, args.token, args.socketResponse, args.bufferedByte, args.fileName);
        return result;
      }
    }

    public static class sendVoice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendVoice_args> {
      public sendVoice() {
        super("sendVoice");
      }

      public sendVoice_args getEmptyArgsInstance() {
        return new sendVoice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendVoice_result getResult(I iface, sendVoice_args args) throws TException {
        sendVoice_result result = new sendVoice_result();
        result.success = iface.sendVoice(args.appCredentialId, args.token, args.socketResponse, args.bufferedByte, args.fileName);
        return result;
      }
    }

    public static class expireMyToken<I extends Iface> extends org.apache.thrift.ProcessFunction<I, expireMyToken_args> {
      public expireMyToken() {
        super("expireMyToken");
      }

      public expireMyToken_args getEmptyArgsInstance() {
        return new expireMyToken_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public expireMyToken_result getResult(I iface, expireMyToken_args args) throws TException {
        expireMyToken_result result = new expireMyToken_result();
        result.success = iface.expireMyToken(args.appCredentialId, args.token);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getToken", new getToken());
      processMap.put("sendVideo", new sendVideo());
      processMap.put("sendPicture", new sendPicture());
      processMap.put("sendVoice", new sendVoice());
      processMap.put("expireMyToken", new expireMyToken());
      return processMap;
    }

    public static class getToken<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getToken_args, String> {
      public getToken() {
        super("getToken");
      }

      public getToken_args getEmptyArgsInstance() {
        return new getToken_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getToken_result result = new getToken_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getToken_result result = new getToken_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getToken_args args, AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getToken(args.accessToken,resultHandler);
      }
    }

    public static class sendVideo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendVideo_args, ResponseObj> {
      public sendVideo() {
        super("sendVideo");
      }

      public sendVideo_args getEmptyArgsInstance() {
        return new sendVideo_args();
      }

      public AsyncMethodCallback<ResponseObj> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResponseObj>() { 
          public void onComplete(ResponseObj o) {
            sendVideo_result result = new sendVideo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendVideo_result result = new sendVideo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendVideo_args args, AsyncMethodCallback<ResponseObj> resultHandler) throws TException {
        iface.sendVideo(args.appCredentialId, args.token, args.socketResponse, args.bufferedByte, args.fileName,resultHandler);
      }
    }

    public static class sendPicture<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendPicture_args, ResponseObj> {
      public sendPicture() {
        super("sendPicture");
      }

      public sendPicture_args getEmptyArgsInstance() {
        return new sendPicture_args();
      }

      public AsyncMethodCallback<ResponseObj> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResponseObj>() { 
          public void onComplete(ResponseObj o) {
            sendPicture_result result = new sendPicture_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendPicture_result result = new sendPicture_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendPicture_args args, AsyncMethodCallback<ResponseObj> resultHandler) throws TException {
        iface.sendPicture(args.appCredentialId, args.token, args.socketResponse, args.bufferedByte, args.fileName,resultHandler);
      }
    }

    public static class sendVoice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendVoice_args, ResponseObj> {
      public sendVoice() {
        super("sendVoice");
      }

      public sendVoice_args getEmptyArgsInstance() {
        return new sendVoice_args();
      }

      public AsyncMethodCallback<ResponseObj> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResponseObj>() { 
          public void onComplete(ResponseObj o) {
            sendVoice_result result = new sendVoice_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendVoice_result result = new sendVoice_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendVoice_args args, AsyncMethodCallback<ResponseObj> resultHandler) throws TException {
        iface.sendVoice(args.appCredentialId, args.token, args.socketResponse, args.bufferedByte, args.fileName,resultHandler);
      }
    }

    public static class expireMyToken<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, expireMyToken_args, ResponseObj> {
      public expireMyToken() {
        super("expireMyToken");
      }

      public expireMyToken_args getEmptyArgsInstance() {
        return new expireMyToken_args();
      }

      public AsyncMethodCallback<ResponseObj> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResponseObj>() { 
          public void onComplete(ResponseObj o) {
            expireMyToken_result result = new expireMyToken_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            expireMyToken_result result = new expireMyToken_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, expireMyToken_args args, AsyncMethodCallback<ResponseObj> resultHandler) throws TException {
        iface.expireMyToken(args.appCredentialId, args.token,resultHandler);
      }
    }

  }

  public static class getToken_args implements org.apache.thrift.TBase<getToken_args, getToken_args._Fields>, java.io.Serializable, Cloneable, Comparable<getToken_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getToken_args");

    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("accessToken", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getToken_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getToken_argsTupleSchemeFactory());
    }

    public String accessToken; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCESS_TOKEN((short)1, "accessToken");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("accessToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getToken_args.class, metaDataMap);
    }

    public getToken_args() {
    }

    public getToken_args(
      String accessToken)
    {
      this();
      this.accessToken = accessToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getToken_args(getToken_args other) {
      if (other.isSetAccessToken()) {
        this.accessToken = other.accessToken;
      }
    }

    public getToken_args deepCopy() {
      return new getToken_args(this);
    }

    @Override
    public void clear() {
      this.accessToken = null;
    }

    public String getAccessToken() {
      return this.accessToken;
    }

    public getToken_args setAccessToken(String accessToken) {
      this.accessToken = accessToken;
      return this;
    }

    public void unsetAccessToken() {
      this.accessToken = null;
    }

    /** Returns true if field accessToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessToken() {
      return this.accessToken != null;
    }

    public void setAccessTokenIsSet(boolean value) {
      if (!value) {
        this.accessToken = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccessToken();
        } else {
          setAccessToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCESS_TOKEN:
        return getAccessToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCESS_TOKEN:
        return isSetAccessToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getToken_args)
        return this.equals((getToken_args)that);
      return false;
    }

    public boolean equals(getToken_args that) {
      if (that == null)
        return false;

      boolean this_present_accessToken = true && this.isSetAccessToken();
      boolean that_present_accessToken = true && that.isSetAccessToken();
      if (this_present_accessToken || that_present_accessToken) {
        if (!(this_present_accessToken && that_present_accessToken))
          return false;
        if (!this.accessToken.equals(that.accessToken))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_accessToken = true && (isSetAccessToken());
      list.add(present_accessToken);
      if (present_accessToken)
        list.add(accessToken);

      return list.hashCode();
    }

    @Override
    public int compareTo(getToken_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAccessToken()).compareTo(other.isSetAccessToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessToken, other.accessToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getToken_args(");
      boolean first = true;

      sb.append("accessToken:");
      if (this.accessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.accessToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getToken_argsStandardSchemeFactory implements SchemeFactory {
      public getToken_argsStandardScheme getScheme() {
        return new getToken_argsStandardScheme();
      }
    }

    private static class getToken_argsStandardScheme extends StandardScheme<getToken_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getToken_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessToken = iprot.readString();
                struct.setAccessTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getToken_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accessToken != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.accessToken);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getToken_argsTupleSchemeFactory implements SchemeFactory {
      public getToken_argsTupleScheme getScheme() {
        return new getToken_argsTupleScheme();
      }
    }

    private static class getToken_argsTupleScheme extends TupleScheme<getToken_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getToken_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccessToken()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAccessToken()) {
          oprot.writeString(struct.accessToken);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getToken_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.accessToken = iprot.readString();
          struct.setAccessTokenIsSet(true);
        }
      }
    }

  }

  public static class getToken_result implements org.apache.thrift.TBase<getToken_result, getToken_result._Fields>, java.io.Serializable, Cloneable, Comparable<getToken_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getToken_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getToken_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getToken_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getToken_result.class, metaDataMap);
    }

    public getToken_result() {
    }

    public getToken_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getToken_result(getToken_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getToken_result deepCopy() {
      return new getToken_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getToken_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getToken_result)
        return this.equals((getToken_result)that);
      return false;
    }

    public boolean equals(getToken_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getToken_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getToken_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getToken_resultStandardSchemeFactory implements SchemeFactory {
      public getToken_resultStandardScheme getScheme() {
        return new getToken_resultStandardScheme();
      }
    }

    private static class getToken_resultStandardScheme extends StandardScheme<getToken_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getToken_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getToken_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getToken_resultTupleSchemeFactory implements SchemeFactory {
      public getToken_resultTupleScheme getScheme() {
        return new getToken_resultTupleScheme();
      }
    }

    private static class getToken_resultTupleScheme extends TupleScheme<getToken_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getToken_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getToken_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class sendVideo_args implements org.apache.thrift.TBase<sendVideo_args, sendVideo_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendVideo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendVideo_args");

    private static final org.apache.thrift.protocol.TField APP_CREDENTIAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appCredentialId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SOCKET_RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("socketResponse", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField BUFFERED_BYTE_FIELD_DESC = new org.apache.thrift.protocol.TField("bufferedByte", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendVideo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendVideo_argsTupleSchemeFactory());
    }

    public int appCredentialId; // required
    public String token; // required
    public String socketResponse; // required
    public ByteBuffer bufferedByte; // required
    public String fileName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_CREDENTIAL_ID((short)1, "appCredentialId"),
      TOKEN((short)2, "token"),
      SOCKET_RESPONSE((short)3, "socketResponse"),
      BUFFERED_BYTE((short)4, "bufferedByte"),
      FILE_NAME((short)5, "fileName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_CREDENTIAL_ID
            return APP_CREDENTIAL_ID;
          case 2: // TOKEN
            return TOKEN;
          case 3: // SOCKET_RESPONSE
            return SOCKET_RESPONSE;
          case 4: // BUFFERED_BYTE
            return BUFFERED_BYTE;
          case 5: // FILE_NAME
            return FILE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPCREDENTIALID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_CREDENTIAL_ID, new org.apache.thrift.meta_data.FieldMetaData("appCredentialId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SOCKET_RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("socketResponse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BUFFERED_BYTE, new org.apache.thrift.meta_data.FieldMetaData("bufferedByte", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendVideo_args.class, metaDataMap);
    }

    public sendVideo_args() {
    }

    public sendVideo_args(
      int appCredentialId,
      String token,
      String socketResponse,
      ByteBuffer bufferedByte,
      String fileName)
    {
      this();
      this.appCredentialId = appCredentialId;
      setAppCredentialIdIsSet(true);
      this.token = token;
      this.socketResponse = socketResponse;
      this.bufferedByte = org.apache.thrift.TBaseHelper.copyBinary(bufferedByte);
      this.fileName = fileName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendVideo_args(sendVideo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.appCredentialId = other.appCredentialId;
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetSocketResponse()) {
        this.socketResponse = other.socketResponse;
      }
      if (other.isSetBufferedByte()) {
        this.bufferedByte = org.apache.thrift.TBaseHelper.copyBinary(other.bufferedByte);
      }
      if (other.isSetFileName()) {
        this.fileName = other.fileName;
      }
    }

    public sendVideo_args deepCopy() {
      return new sendVideo_args(this);
    }

    @Override
    public void clear() {
      setAppCredentialIdIsSet(false);
      this.appCredentialId = 0;
      this.token = null;
      this.socketResponse = null;
      this.bufferedByte = null;
      this.fileName = null;
    }

    public int getAppCredentialId() {
      return this.appCredentialId;
    }

    public sendVideo_args setAppCredentialId(int appCredentialId) {
      this.appCredentialId = appCredentialId;
      setAppCredentialIdIsSet(true);
      return this;
    }

    public void unsetAppCredentialId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPCREDENTIALID_ISSET_ID);
    }

    /** Returns true if field appCredentialId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppCredentialId() {
      return EncodingUtils.testBit(__isset_bitfield, __APPCREDENTIALID_ISSET_ID);
    }

    public void setAppCredentialIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPCREDENTIALID_ISSET_ID, value);
    }

    public String getToken() {
      return this.token;
    }

    public sendVideo_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getSocketResponse() {
      return this.socketResponse;
    }

    public sendVideo_args setSocketResponse(String socketResponse) {
      this.socketResponse = socketResponse;
      return this;
    }

    public void unsetSocketResponse() {
      this.socketResponse = null;
    }

    /** Returns true if field socketResponse is set (has been assigned a value) and false otherwise */
    public boolean isSetSocketResponse() {
      return this.socketResponse != null;
    }

    public void setSocketResponseIsSet(boolean value) {
      if (!value) {
        this.socketResponse = null;
      }
    }

    public byte[] getBufferedByte() {
      setBufferedByte(org.apache.thrift.TBaseHelper.rightSize(bufferedByte));
      return bufferedByte == null ? null : bufferedByte.array();
    }

    public ByteBuffer bufferForBufferedByte() {
      return org.apache.thrift.TBaseHelper.copyBinary(bufferedByte);
    }

    public sendVideo_args setBufferedByte(byte[] bufferedByte) {
      this.bufferedByte = bufferedByte == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(bufferedByte, bufferedByte.length));
      return this;
    }

    public sendVideo_args setBufferedByte(ByteBuffer bufferedByte) {
      this.bufferedByte = org.apache.thrift.TBaseHelper.copyBinary(bufferedByte);
      return this;
    }

    public void unsetBufferedByte() {
      this.bufferedByte = null;
    }

    /** Returns true if field bufferedByte is set (has been assigned a value) and false otherwise */
    public boolean isSetBufferedByte() {
      return this.bufferedByte != null;
    }

    public void setBufferedByteIsSet(boolean value) {
      if (!value) {
        this.bufferedByte = null;
      }
    }

    public String getFileName() {
      return this.fileName;
    }

    public sendVideo_args setFileName(String fileName) {
      this.fileName = fileName;
      return this;
    }

    public void unsetFileName() {
      this.fileName = null;
    }

    /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
    public boolean isSetFileName() {
      return this.fileName != null;
    }

    public void setFileNameIsSet(boolean value) {
      if (!value) {
        this.fileName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_CREDENTIAL_ID:
        if (value == null) {
          unsetAppCredentialId();
        } else {
          setAppCredentialId((Integer)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case SOCKET_RESPONSE:
        if (value == null) {
          unsetSocketResponse();
        } else {
          setSocketResponse((String)value);
        }
        break;

      case BUFFERED_BYTE:
        if (value == null) {
          unsetBufferedByte();
        } else {
          setBufferedByte((ByteBuffer)value);
        }
        break;

      case FILE_NAME:
        if (value == null) {
          unsetFileName();
        } else {
          setFileName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_CREDENTIAL_ID:
        return getAppCredentialId();

      case TOKEN:
        return getToken();

      case SOCKET_RESPONSE:
        return getSocketResponse();

      case BUFFERED_BYTE:
        return getBufferedByte();

      case FILE_NAME:
        return getFileName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_CREDENTIAL_ID:
        return isSetAppCredentialId();
      case TOKEN:
        return isSetToken();
      case SOCKET_RESPONSE:
        return isSetSocketResponse();
      case BUFFERED_BYTE:
        return isSetBufferedByte();
      case FILE_NAME:
        return isSetFileName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendVideo_args)
        return this.equals((sendVideo_args)that);
      return false;
    }

    public boolean equals(sendVideo_args that) {
      if (that == null)
        return false;

      boolean this_present_appCredentialId = true;
      boolean that_present_appCredentialId = true;
      if (this_present_appCredentialId || that_present_appCredentialId) {
        if (!(this_present_appCredentialId && that_present_appCredentialId))
          return false;
        if (this.appCredentialId != that.appCredentialId)
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_socketResponse = true && this.isSetSocketResponse();
      boolean that_present_socketResponse = true && that.isSetSocketResponse();
      if (this_present_socketResponse || that_present_socketResponse) {
        if (!(this_present_socketResponse && that_present_socketResponse))
          return false;
        if (!this.socketResponse.equals(that.socketResponse))
          return false;
      }

      boolean this_present_bufferedByte = true && this.isSetBufferedByte();
      boolean that_present_bufferedByte = true && that.isSetBufferedByte();
      if (this_present_bufferedByte || that_present_bufferedByte) {
        if (!(this_present_bufferedByte && that_present_bufferedByte))
          return false;
        if (!this.bufferedByte.equals(that.bufferedByte))
          return false;
      }

      boolean this_present_fileName = true && this.isSetFileName();
      boolean that_present_fileName = true && that.isSetFileName();
      if (this_present_fileName || that_present_fileName) {
        if (!(this_present_fileName && that_present_fileName))
          return false;
        if (!this.fileName.equals(that.fileName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_appCredentialId = true;
      list.add(present_appCredentialId);
      if (present_appCredentialId)
        list.add(appCredentialId);

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_socketResponse = true && (isSetSocketResponse());
      list.add(present_socketResponse);
      if (present_socketResponse)
        list.add(socketResponse);

      boolean present_bufferedByte = true && (isSetBufferedByte());
      list.add(present_bufferedByte);
      if (present_bufferedByte)
        list.add(bufferedByte);

      boolean present_fileName = true && (isSetFileName());
      list.add(present_fileName);
      if (present_fileName)
        list.add(fileName);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendVideo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppCredentialId()).compareTo(other.isSetAppCredentialId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppCredentialId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appCredentialId, other.appCredentialId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSocketResponse()).compareTo(other.isSetSocketResponse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSocketResponse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.socketResponse, other.socketResponse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBufferedByte()).compareTo(other.isSetBufferedByte());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBufferedByte()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bufferedByte, other.bufferedByte);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendVideo_args(");
      boolean first = true;

      sb.append("appCredentialId:");
      sb.append(this.appCredentialId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("socketResponse:");
      if (this.socketResponse == null) {
        sb.append("null");
      } else {
        sb.append(this.socketResponse);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bufferedByte:");
      if (this.bufferedByte == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.bufferedByte, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileName:");
      if (this.fileName == null) {
        sb.append("null");
      } else {
        sb.append(this.fileName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendVideo_argsStandardSchemeFactory implements SchemeFactory {
      public sendVideo_argsStandardScheme getScheme() {
        return new sendVideo_argsStandardScheme();
      }
    }

    private static class sendVideo_argsStandardScheme extends StandardScheme<sendVideo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendVideo_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_CREDENTIAL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.appCredentialId = iprot.readI32();
                struct.setAppCredentialIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SOCKET_RESPONSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.socketResponse = iprot.readString();
                struct.setSocketResponseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // BUFFERED_BYTE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bufferedByte = iprot.readBinary();
                struct.setBufferedByteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileName = iprot.readString();
                struct.setFileNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendVideo_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(APP_CREDENTIAL_ID_FIELD_DESC);
        oprot.writeI32(struct.appCredentialId);
        oprot.writeFieldEnd();
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.socketResponse != null) {
          oprot.writeFieldBegin(SOCKET_RESPONSE_FIELD_DESC);
          oprot.writeString(struct.socketResponse);
          oprot.writeFieldEnd();
        }
        if (struct.bufferedByte != null) {
          oprot.writeFieldBegin(BUFFERED_BYTE_FIELD_DESC);
          oprot.writeBinary(struct.bufferedByte);
          oprot.writeFieldEnd();
        }
        if (struct.fileName != null) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.fileName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendVideo_argsTupleSchemeFactory implements SchemeFactory {
      public sendVideo_argsTupleScheme getScheme() {
        return new sendVideo_argsTupleScheme();
      }
    }

    private static class sendVideo_argsTupleScheme extends TupleScheme<sendVideo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendVideo_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppCredentialId()) {
          optionals.set(0);
        }
        if (struct.isSetToken()) {
          optionals.set(1);
        }
        if (struct.isSetSocketResponse()) {
          optionals.set(2);
        }
        if (struct.isSetBufferedByte()) {
          optionals.set(3);
        }
        if (struct.isSetFileName()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetAppCredentialId()) {
          oprot.writeI32(struct.appCredentialId);
        }
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
        if (struct.isSetSocketResponse()) {
          oprot.writeString(struct.socketResponse);
        }
        if (struct.isSetBufferedByte()) {
          oprot.writeBinary(struct.bufferedByte);
        }
        if (struct.isSetFileName()) {
          oprot.writeString(struct.fileName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendVideo_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.appCredentialId = iprot.readI32();
          struct.setAppCredentialIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
        if (incoming.get(2)) {
          struct.socketResponse = iprot.readString();
          struct.setSocketResponseIsSet(true);
        }
        if (incoming.get(3)) {
          struct.bufferedByte = iprot.readBinary();
          struct.setBufferedByteIsSet(true);
        }
        if (incoming.get(4)) {
          struct.fileName = iprot.readString();
          struct.setFileNameIsSet(true);
        }
      }
    }

  }

  public static class sendVideo_result implements org.apache.thrift.TBase<sendVideo_result, sendVideo_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendVideo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendVideo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendVideo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendVideo_resultTupleSchemeFactory());
    }

    public ResponseObj success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResponseObj.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendVideo_result.class, metaDataMap);
    }

    public sendVideo_result() {
    }

    public sendVideo_result(
      ResponseObj success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendVideo_result(sendVideo_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResponseObj(other.success);
      }
    }

    public sendVideo_result deepCopy() {
      return new sendVideo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResponseObj getSuccess() {
      return this.success;
    }

    public sendVideo_result setSuccess(ResponseObj success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResponseObj)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendVideo_result)
        return this.equals((sendVideo_result)that);
      return false;
    }

    public boolean equals(sendVideo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendVideo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendVideo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendVideo_resultStandardSchemeFactory implements SchemeFactory {
      public sendVideo_resultStandardScheme getScheme() {
        return new sendVideo_resultStandardScheme();
      }
    }

    private static class sendVideo_resultStandardScheme extends StandardScheme<sendVideo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendVideo_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResponseObj();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendVideo_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendVideo_resultTupleSchemeFactory implements SchemeFactory {
      public sendVideo_resultTupleScheme getScheme() {
        return new sendVideo_resultTupleScheme();
      }
    }

    private static class sendVideo_resultTupleScheme extends TupleScheme<sendVideo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendVideo_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendVideo_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResponseObj();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class sendPicture_args implements org.apache.thrift.TBase<sendPicture_args, sendPicture_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendPicture_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendPicture_args");

    private static final org.apache.thrift.protocol.TField APP_CREDENTIAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appCredentialId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SOCKET_RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("socketResponse", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField BUFFERED_BYTE_FIELD_DESC = new org.apache.thrift.protocol.TField("bufferedByte", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendPicture_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendPicture_argsTupleSchemeFactory());
    }

    public int appCredentialId; // required
    public String token; // required
    public String socketResponse; // required
    public ByteBuffer bufferedByte; // required
    public String fileName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_CREDENTIAL_ID((short)1, "appCredentialId"),
      TOKEN((short)2, "token"),
      SOCKET_RESPONSE((short)3, "socketResponse"),
      BUFFERED_BYTE((short)4, "bufferedByte"),
      FILE_NAME((short)5, "fileName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_CREDENTIAL_ID
            return APP_CREDENTIAL_ID;
          case 2: // TOKEN
            return TOKEN;
          case 3: // SOCKET_RESPONSE
            return SOCKET_RESPONSE;
          case 4: // BUFFERED_BYTE
            return BUFFERED_BYTE;
          case 5: // FILE_NAME
            return FILE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPCREDENTIALID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_CREDENTIAL_ID, new org.apache.thrift.meta_data.FieldMetaData("appCredentialId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SOCKET_RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("socketResponse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BUFFERED_BYTE, new org.apache.thrift.meta_data.FieldMetaData("bufferedByte", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendPicture_args.class, metaDataMap);
    }

    public sendPicture_args() {
    }

    public sendPicture_args(
      int appCredentialId,
      String token,
      String socketResponse,
      ByteBuffer bufferedByte,
      String fileName)
    {
      this();
      this.appCredentialId = appCredentialId;
      setAppCredentialIdIsSet(true);
      this.token = token;
      this.socketResponse = socketResponse;
      this.bufferedByte = org.apache.thrift.TBaseHelper.copyBinary(bufferedByte);
      this.fileName = fileName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendPicture_args(sendPicture_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.appCredentialId = other.appCredentialId;
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetSocketResponse()) {
        this.socketResponse = other.socketResponse;
      }
      if (other.isSetBufferedByte()) {
        this.bufferedByte = org.apache.thrift.TBaseHelper.copyBinary(other.bufferedByte);
      }
      if (other.isSetFileName()) {
        this.fileName = other.fileName;
      }
    }

    public sendPicture_args deepCopy() {
      return new sendPicture_args(this);
    }

    @Override
    public void clear() {
      setAppCredentialIdIsSet(false);
      this.appCredentialId = 0;
      this.token = null;
      this.socketResponse = null;
      this.bufferedByte = null;
      this.fileName = null;
    }

    public int getAppCredentialId() {
      return this.appCredentialId;
    }

    public sendPicture_args setAppCredentialId(int appCredentialId) {
      this.appCredentialId = appCredentialId;
      setAppCredentialIdIsSet(true);
      return this;
    }

    public void unsetAppCredentialId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPCREDENTIALID_ISSET_ID);
    }

    /** Returns true if field appCredentialId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppCredentialId() {
      return EncodingUtils.testBit(__isset_bitfield, __APPCREDENTIALID_ISSET_ID);
    }

    public void setAppCredentialIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPCREDENTIALID_ISSET_ID, value);
    }

    public String getToken() {
      return this.token;
    }

    public sendPicture_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getSocketResponse() {
      return this.socketResponse;
    }

    public sendPicture_args setSocketResponse(String socketResponse) {
      this.socketResponse = socketResponse;
      return this;
    }

    public void unsetSocketResponse() {
      this.socketResponse = null;
    }

    /** Returns true if field socketResponse is set (has been assigned a value) and false otherwise */
    public boolean isSetSocketResponse() {
      return this.socketResponse != null;
    }

    public void setSocketResponseIsSet(boolean value) {
      if (!value) {
        this.socketResponse = null;
      }
    }

    public byte[] getBufferedByte() {
      setBufferedByte(org.apache.thrift.TBaseHelper.rightSize(bufferedByte));
      return bufferedByte == null ? null : bufferedByte.array();
    }

    public ByteBuffer bufferForBufferedByte() {
      return org.apache.thrift.TBaseHelper.copyBinary(bufferedByte);
    }

    public sendPicture_args setBufferedByte(byte[] bufferedByte) {
      this.bufferedByte = bufferedByte == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(bufferedByte, bufferedByte.length));
      return this;
    }

    public sendPicture_args setBufferedByte(ByteBuffer bufferedByte) {
      this.bufferedByte = org.apache.thrift.TBaseHelper.copyBinary(bufferedByte);
      return this;
    }

    public void unsetBufferedByte() {
      this.bufferedByte = null;
    }

    /** Returns true if field bufferedByte is set (has been assigned a value) and false otherwise */
    public boolean isSetBufferedByte() {
      return this.bufferedByte != null;
    }

    public void setBufferedByteIsSet(boolean value) {
      if (!value) {
        this.bufferedByte = null;
      }
    }

    public String getFileName() {
      return this.fileName;
    }

    public sendPicture_args setFileName(String fileName) {
      this.fileName = fileName;
      return this;
    }

    public void unsetFileName() {
      this.fileName = null;
    }

    /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
    public boolean isSetFileName() {
      return this.fileName != null;
    }

    public void setFileNameIsSet(boolean value) {
      if (!value) {
        this.fileName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_CREDENTIAL_ID:
        if (value == null) {
          unsetAppCredentialId();
        } else {
          setAppCredentialId((Integer)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case SOCKET_RESPONSE:
        if (value == null) {
          unsetSocketResponse();
        } else {
          setSocketResponse((String)value);
        }
        break;

      case BUFFERED_BYTE:
        if (value == null) {
          unsetBufferedByte();
        } else {
          setBufferedByte((ByteBuffer)value);
        }
        break;

      case FILE_NAME:
        if (value == null) {
          unsetFileName();
        } else {
          setFileName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_CREDENTIAL_ID:
        return getAppCredentialId();

      case TOKEN:
        return getToken();

      case SOCKET_RESPONSE:
        return getSocketResponse();

      case BUFFERED_BYTE:
        return getBufferedByte();

      case FILE_NAME:
        return getFileName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_CREDENTIAL_ID:
        return isSetAppCredentialId();
      case TOKEN:
        return isSetToken();
      case SOCKET_RESPONSE:
        return isSetSocketResponse();
      case BUFFERED_BYTE:
        return isSetBufferedByte();
      case FILE_NAME:
        return isSetFileName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendPicture_args)
        return this.equals((sendPicture_args)that);
      return false;
    }

    public boolean equals(sendPicture_args that) {
      if (that == null)
        return false;

      boolean this_present_appCredentialId = true;
      boolean that_present_appCredentialId = true;
      if (this_present_appCredentialId || that_present_appCredentialId) {
        if (!(this_present_appCredentialId && that_present_appCredentialId))
          return false;
        if (this.appCredentialId != that.appCredentialId)
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_socketResponse = true && this.isSetSocketResponse();
      boolean that_present_socketResponse = true && that.isSetSocketResponse();
      if (this_present_socketResponse || that_present_socketResponse) {
        if (!(this_present_socketResponse && that_present_socketResponse))
          return false;
        if (!this.socketResponse.equals(that.socketResponse))
          return false;
      }

      boolean this_present_bufferedByte = true && this.isSetBufferedByte();
      boolean that_present_bufferedByte = true && that.isSetBufferedByte();
      if (this_present_bufferedByte || that_present_bufferedByte) {
        if (!(this_present_bufferedByte && that_present_bufferedByte))
          return false;
        if (!this.bufferedByte.equals(that.bufferedByte))
          return false;
      }

      boolean this_present_fileName = true && this.isSetFileName();
      boolean that_present_fileName = true && that.isSetFileName();
      if (this_present_fileName || that_present_fileName) {
        if (!(this_present_fileName && that_present_fileName))
          return false;
        if (!this.fileName.equals(that.fileName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_appCredentialId = true;
      list.add(present_appCredentialId);
      if (present_appCredentialId)
        list.add(appCredentialId);

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_socketResponse = true && (isSetSocketResponse());
      list.add(present_socketResponse);
      if (present_socketResponse)
        list.add(socketResponse);

      boolean present_bufferedByte = true && (isSetBufferedByte());
      list.add(present_bufferedByte);
      if (present_bufferedByte)
        list.add(bufferedByte);

      boolean present_fileName = true && (isSetFileName());
      list.add(present_fileName);
      if (present_fileName)
        list.add(fileName);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendPicture_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppCredentialId()).compareTo(other.isSetAppCredentialId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppCredentialId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appCredentialId, other.appCredentialId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSocketResponse()).compareTo(other.isSetSocketResponse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSocketResponse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.socketResponse, other.socketResponse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBufferedByte()).compareTo(other.isSetBufferedByte());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBufferedByte()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bufferedByte, other.bufferedByte);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendPicture_args(");
      boolean first = true;

      sb.append("appCredentialId:");
      sb.append(this.appCredentialId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("socketResponse:");
      if (this.socketResponse == null) {
        sb.append("null");
      } else {
        sb.append(this.socketResponse);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bufferedByte:");
      if (this.bufferedByte == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.bufferedByte, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileName:");
      if (this.fileName == null) {
        sb.append("null");
      } else {
        sb.append(this.fileName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendPicture_argsStandardSchemeFactory implements SchemeFactory {
      public sendPicture_argsStandardScheme getScheme() {
        return new sendPicture_argsStandardScheme();
      }
    }

    private static class sendPicture_argsStandardScheme extends StandardScheme<sendPicture_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendPicture_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_CREDENTIAL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.appCredentialId = iprot.readI32();
                struct.setAppCredentialIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SOCKET_RESPONSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.socketResponse = iprot.readString();
                struct.setSocketResponseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // BUFFERED_BYTE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bufferedByte = iprot.readBinary();
                struct.setBufferedByteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileName = iprot.readString();
                struct.setFileNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendPicture_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(APP_CREDENTIAL_ID_FIELD_DESC);
        oprot.writeI32(struct.appCredentialId);
        oprot.writeFieldEnd();
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.socketResponse != null) {
          oprot.writeFieldBegin(SOCKET_RESPONSE_FIELD_DESC);
          oprot.writeString(struct.socketResponse);
          oprot.writeFieldEnd();
        }
        if (struct.bufferedByte != null) {
          oprot.writeFieldBegin(BUFFERED_BYTE_FIELD_DESC);
          oprot.writeBinary(struct.bufferedByte);
          oprot.writeFieldEnd();
        }
        if (struct.fileName != null) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.fileName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendPicture_argsTupleSchemeFactory implements SchemeFactory {
      public sendPicture_argsTupleScheme getScheme() {
        return new sendPicture_argsTupleScheme();
      }
    }

    private static class sendPicture_argsTupleScheme extends TupleScheme<sendPicture_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendPicture_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppCredentialId()) {
          optionals.set(0);
        }
        if (struct.isSetToken()) {
          optionals.set(1);
        }
        if (struct.isSetSocketResponse()) {
          optionals.set(2);
        }
        if (struct.isSetBufferedByte()) {
          optionals.set(3);
        }
        if (struct.isSetFileName()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetAppCredentialId()) {
          oprot.writeI32(struct.appCredentialId);
        }
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
        if (struct.isSetSocketResponse()) {
          oprot.writeString(struct.socketResponse);
        }
        if (struct.isSetBufferedByte()) {
          oprot.writeBinary(struct.bufferedByte);
        }
        if (struct.isSetFileName()) {
          oprot.writeString(struct.fileName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendPicture_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.appCredentialId = iprot.readI32();
          struct.setAppCredentialIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
        if (incoming.get(2)) {
          struct.socketResponse = iprot.readString();
          struct.setSocketResponseIsSet(true);
        }
        if (incoming.get(3)) {
          struct.bufferedByte = iprot.readBinary();
          struct.setBufferedByteIsSet(true);
        }
        if (incoming.get(4)) {
          struct.fileName = iprot.readString();
          struct.setFileNameIsSet(true);
        }
      }
    }

  }

  public static class sendPicture_result implements org.apache.thrift.TBase<sendPicture_result, sendPicture_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendPicture_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendPicture_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendPicture_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendPicture_resultTupleSchemeFactory());
    }

    public ResponseObj success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResponseObj.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendPicture_result.class, metaDataMap);
    }

    public sendPicture_result() {
    }

    public sendPicture_result(
      ResponseObj success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendPicture_result(sendPicture_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResponseObj(other.success);
      }
    }

    public sendPicture_result deepCopy() {
      return new sendPicture_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResponseObj getSuccess() {
      return this.success;
    }

    public sendPicture_result setSuccess(ResponseObj success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResponseObj)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendPicture_result)
        return this.equals((sendPicture_result)that);
      return false;
    }

    public boolean equals(sendPicture_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendPicture_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendPicture_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendPicture_resultStandardSchemeFactory implements SchemeFactory {
      public sendPicture_resultStandardScheme getScheme() {
        return new sendPicture_resultStandardScheme();
      }
    }

    private static class sendPicture_resultStandardScheme extends StandardScheme<sendPicture_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendPicture_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResponseObj();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendPicture_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendPicture_resultTupleSchemeFactory implements SchemeFactory {
      public sendPicture_resultTupleScheme getScheme() {
        return new sendPicture_resultTupleScheme();
      }
    }

    private static class sendPicture_resultTupleScheme extends TupleScheme<sendPicture_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendPicture_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendPicture_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResponseObj();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class sendVoice_args implements org.apache.thrift.TBase<sendVoice_args, sendVoice_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendVoice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendVoice_args");

    private static final org.apache.thrift.protocol.TField APP_CREDENTIAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appCredentialId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SOCKET_RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("socketResponse", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField BUFFERED_BYTE_FIELD_DESC = new org.apache.thrift.protocol.TField("bufferedByte", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendVoice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendVoice_argsTupleSchemeFactory());
    }

    public int appCredentialId; // required
    public String token; // required
    public String socketResponse; // required
    public ByteBuffer bufferedByte; // required
    public String fileName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_CREDENTIAL_ID((short)1, "appCredentialId"),
      TOKEN((short)2, "token"),
      SOCKET_RESPONSE((short)3, "socketResponse"),
      BUFFERED_BYTE((short)4, "bufferedByte"),
      FILE_NAME((short)5, "fileName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_CREDENTIAL_ID
            return APP_CREDENTIAL_ID;
          case 2: // TOKEN
            return TOKEN;
          case 3: // SOCKET_RESPONSE
            return SOCKET_RESPONSE;
          case 4: // BUFFERED_BYTE
            return BUFFERED_BYTE;
          case 5: // FILE_NAME
            return FILE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPCREDENTIALID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_CREDENTIAL_ID, new org.apache.thrift.meta_data.FieldMetaData("appCredentialId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SOCKET_RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("socketResponse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BUFFERED_BYTE, new org.apache.thrift.meta_data.FieldMetaData("bufferedByte", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendVoice_args.class, metaDataMap);
    }

    public sendVoice_args() {
    }

    public sendVoice_args(
      int appCredentialId,
      String token,
      String socketResponse,
      ByteBuffer bufferedByte,
      String fileName)
    {
      this();
      this.appCredentialId = appCredentialId;
      setAppCredentialIdIsSet(true);
      this.token = token;
      this.socketResponse = socketResponse;
      this.bufferedByte = org.apache.thrift.TBaseHelper.copyBinary(bufferedByte);
      this.fileName = fileName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendVoice_args(sendVoice_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.appCredentialId = other.appCredentialId;
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetSocketResponse()) {
        this.socketResponse = other.socketResponse;
      }
      if (other.isSetBufferedByte()) {
        this.bufferedByte = org.apache.thrift.TBaseHelper.copyBinary(other.bufferedByte);
      }
      if (other.isSetFileName()) {
        this.fileName = other.fileName;
      }
    }

    public sendVoice_args deepCopy() {
      return new sendVoice_args(this);
    }

    @Override
    public void clear() {
      setAppCredentialIdIsSet(false);
      this.appCredentialId = 0;
      this.token = null;
      this.socketResponse = null;
      this.bufferedByte = null;
      this.fileName = null;
    }

    public int getAppCredentialId() {
      return this.appCredentialId;
    }

    public sendVoice_args setAppCredentialId(int appCredentialId) {
      this.appCredentialId = appCredentialId;
      setAppCredentialIdIsSet(true);
      return this;
    }

    public void unsetAppCredentialId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPCREDENTIALID_ISSET_ID);
    }

    /** Returns true if field appCredentialId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppCredentialId() {
      return EncodingUtils.testBit(__isset_bitfield, __APPCREDENTIALID_ISSET_ID);
    }

    public void setAppCredentialIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPCREDENTIALID_ISSET_ID, value);
    }

    public String getToken() {
      return this.token;
    }

    public sendVoice_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getSocketResponse() {
      return this.socketResponse;
    }

    public sendVoice_args setSocketResponse(String socketResponse) {
      this.socketResponse = socketResponse;
      return this;
    }

    public void unsetSocketResponse() {
      this.socketResponse = null;
    }

    /** Returns true if field socketResponse is set (has been assigned a value) and false otherwise */
    public boolean isSetSocketResponse() {
      return this.socketResponse != null;
    }

    public void setSocketResponseIsSet(boolean value) {
      if (!value) {
        this.socketResponse = null;
      }
    }

    public byte[] getBufferedByte() {
      setBufferedByte(org.apache.thrift.TBaseHelper.rightSize(bufferedByte));
      return bufferedByte == null ? null : bufferedByte.array();
    }

    public ByteBuffer bufferForBufferedByte() {
      return org.apache.thrift.TBaseHelper.copyBinary(bufferedByte);
    }

    public sendVoice_args setBufferedByte(byte[] bufferedByte) {
      this.bufferedByte = bufferedByte == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(bufferedByte, bufferedByte.length));
      return this;
    }

    public sendVoice_args setBufferedByte(ByteBuffer bufferedByte) {
      this.bufferedByte = org.apache.thrift.TBaseHelper.copyBinary(bufferedByte);
      return this;
    }

    public void unsetBufferedByte() {
      this.bufferedByte = null;
    }

    /** Returns true if field bufferedByte is set (has been assigned a value) and false otherwise */
    public boolean isSetBufferedByte() {
      return this.bufferedByte != null;
    }

    public void setBufferedByteIsSet(boolean value) {
      if (!value) {
        this.bufferedByte = null;
      }
    }

    public String getFileName() {
      return this.fileName;
    }

    public sendVoice_args setFileName(String fileName) {
      this.fileName = fileName;
      return this;
    }

    public void unsetFileName() {
      this.fileName = null;
    }

    /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
    public boolean isSetFileName() {
      return this.fileName != null;
    }

    public void setFileNameIsSet(boolean value) {
      if (!value) {
        this.fileName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_CREDENTIAL_ID:
        if (value == null) {
          unsetAppCredentialId();
        } else {
          setAppCredentialId((Integer)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case SOCKET_RESPONSE:
        if (value == null) {
          unsetSocketResponse();
        } else {
          setSocketResponse((String)value);
        }
        break;

      case BUFFERED_BYTE:
        if (value == null) {
          unsetBufferedByte();
        } else {
          setBufferedByte((ByteBuffer)value);
        }
        break;

      case FILE_NAME:
        if (value == null) {
          unsetFileName();
        } else {
          setFileName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_CREDENTIAL_ID:
        return getAppCredentialId();

      case TOKEN:
        return getToken();

      case SOCKET_RESPONSE:
        return getSocketResponse();

      case BUFFERED_BYTE:
        return getBufferedByte();

      case FILE_NAME:
        return getFileName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_CREDENTIAL_ID:
        return isSetAppCredentialId();
      case TOKEN:
        return isSetToken();
      case SOCKET_RESPONSE:
        return isSetSocketResponse();
      case BUFFERED_BYTE:
        return isSetBufferedByte();
      case FILE_NAME:
        return isSetFileName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendVoice_args)
        return this.equals((sendVoice_args)that);
      return false;
    }

    public boolean equals(sendVoice_args that) {
      if (that == null)
        return false;

      boolean this_present_appCredentialId = true;
      boolean that_present_appCredentialId = true;
      if (this_present_appCredentialId || that_present_appCredentialId) {
        if (!(this_present_appCredentialId && that_present_appCredentialId))
          return false;
        if (this.appCredentialId != that.appCredentialId)
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_socketResponse = true && this.isSetSocketResponse();
      boolean that_present_socketResponse = true && that.isSetSocketResponse();
      if (this_present_socketResponse || that_present_socketResponse) {
        if (!(this_present_socketResponse && that_present_socketResponse))
          return false;
        if (!this.socketResponse.equals(that.socketResponse))
          return false;
      }

      boolean this_present_bufferedByte = true && this.isSetBufferedByte();
      boolean that_present_bufferedByte = true && that.isSetBufferedByte();
      if (this_present_bufferedByte || that_present_bufferedByte) {
        if (!(this_present_bufferedByte && that_present_bufferedByte))
          return false;
        if (!this.bufferedByte.equals(that.bufferedByte))
          return false;
      }

      boolean this_present_fileName = true && this.isSetFileName();
      boolean that_present_fileName = true && that.isSetFileName();
      if (this_present_fileName || that_present_fileName) {
        if (!(this_present_fileName && that_present_fileName))
          return false;
        if (!this.fileName.equals(that.fileName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_appCredentialId = true;
      list.add(present_appCredentialId);
      if (present_appCredentialId)
        list.add(appCredentialId);

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_socketResponse = true && (isSetSocketResponse());
      list.add(present_socketResponse);
      if (present_socketResponse)
        list.add(socketResponse);

      boolean present_bufferedByte = true && (isSetBufferedByte());
      list.add(present_bufferedByte);
      if (present_bufferedByte)
        list.add(bufferedByte);

      boolean present_fileName = true && (isSetFileName());
      list.add(present_fileName);
      if (present_fileName)
        list.add(fileName);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendVoice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppCredentialId()).compareTo(other.isSetAppCredentialId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppCredentialId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appCredentialId, other.appCredentialId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSocketResponse()).compareTo(other.isSetSocketResponse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSocketResponse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.socketResponse, other.socketResponse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBufferedByte()).compareTo(other.isSetBufferedByte());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBufferedByte()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bufferedByte, other.bufferedByte);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendVoice_args(");
      boolean first = true;

      sb.append("appCredentialId:");
      sb.append(this.appCredentialId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("socketResponse:");
      if (this.socketResponse == null) {
        sb.append("null");
      } else {
        sb.append(this.socketResponse);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bufferedByte:");
      if (this.bufferedByte == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.bufferedByte, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileName:");
      if (this.fileName == null) {
        sb.append("null");
      } else {
        sb.append(this.fileName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendVoice_argsStandardSchemeFactory implements SchemeFactory {
      public sendVoice_argsStandardScheme getScheme() {
        return new sendVoice_argsStandardScheme();
      }
    }

    private static class sendVoice_argsStandardScheme extends StandardScheme<sendVoice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendVoice_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_CREDENTIAL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.appCredentialId = iprot.readI32();
                struct.setAppCredentialIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SOCKET_RESPONSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.socketResponse = iprot.readString();
                struct.setSocketResponseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // BUFFERED_BYTE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bufferedByte = iprot.readBinary();
                struct.setBufferedByteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileName = iprot.readString();
                struct.setFileNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendVoice_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(APP_CREDENTIAL_ID_FIELD_DESC);
        oprot.writeI32(struct.appCredentialId);
        oprot.writeFieldEnd();
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.socketResponse != null) {
          oprot.writeFieldBegin(SOCKET_RESPONSE_FIELD_DESC);
          oprot.writeString(struct.socketResponse);
          oprot.writeFieldEnd();
        }
        if (struct.bufferedByte != null) {
          oprot.writeFieldBegin(BUFFERED_BYTE_FIELD_DESC);
          oprot.writeBinary(struct.bufferedByte);
          oprot.writeFieldEnd();
        }
        if (struct.fileName != null) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.fileName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendVoice_argsTupleSchemeFactory implements SchemeFactory {
      public sendVoice_argsTupleScheme getScheme() {
        return new sendVoice_argsTupleScheme();
      }
    }

    private static class sendVoice_argsTupleScheme extends TupleScheme<sendVoice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendVoice_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppCredentialId()) {
          optionals.set(0);
        }
        if (struct.isSetToken()) {
          optionals.set(1);
        }
        if (struct.isSetSocketResponse()) {
          optionals.set(2);
        }
        if (struct.isSetBufferedByte()) {
          optionals.set(3);
        }
        if (struct.isSetFileName()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetAppCredentialId()) {
          oprot.writeI32(struct.appCredentialId);
        }
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
        if (struct.isSetSocketResponse()) {
          oprot.writeString(struct.socketResponse);
        }
        if (struct.isSetBufferedByte()) {
          oprot.writeBinary(struct.bufferedByte);
        }
        if (struct.isSetFileName()) {
          oprot.writeString(struct.fileName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendVoice_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.appCredentialId = iprot.readI32();
          struct.setAppCredentialIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
        if (incoming.get(2)) {
          struct.socketResponse = iprot.readString();
          struct.setSocketResponseIsSet(true);
        }
        if (incoming.get(3)) {
          struct.bufferedByte = iprot.readBinary();
          struct.setBufferedByteIsSet(true);
        }
        if (incoming.get(4)) {
          struct.fileName = iprot.readString();
          struct.setFileNameIsSet(true);
        }
      }
    }

  }

  public static class sendVoice_result implements org.apache.thrift.TBase<sendVoice_result, sendVoice_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendVoice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendVoice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendVoice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendVoice_resultTupleSchemeFactory());
    }

    public ResponseObj success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResponseObj.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendVoice_result.class, metaDataMap);
    }

    public sendVoice_result() {
    }

    public sendVoice_result(
      ResponseObj success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendVoice_result(sendVoice_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResponseObj(other.success);
      }
    }

    public sendVoice_result deepCopy() {
      return new sendVoice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResponseObj getSuccess() {
      return this.success;
    }

    public sendVoice_result setSuccess(ResponseObj success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResponseObj)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendVoice_result)
        return this.equals((sendVoice_result)that);
      return false;
    }

    public boolean equals(sendVoice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendVoice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendVoice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendVoice_resultStandardSchemeFactory implements SchemeFactory {
      public sendVoice_resultStandardScheme getScheme() {
        return new sendVoice_resultStandardScheme();
      }
    }

    private static class sendVoice_resultStandardScheme extends StandardScheme<sendVoice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendVoice_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResponseObj();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendVoice_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendVoice_resultTupleSchemeFactory implements SchemeFactory {
      public sendVoice_resultTupleScheme getScheme() {
        return new sendVoice_resultTupleScheme();
      }
    }

    private static class sendVoice_resultTupleScheme extends TupleScheme<sendVoice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendVoice_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendVoice_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResponseObj();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class expireMyToken_args implements org.apache.thrift.TBase<expireMyToken_args, expireMyToken_args._Fields>, java.io.Serializable, Cloneable, Comparable<expireMyToken_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("expireMyToken_args");

    private static final org.apache.thrift.protocol.TField APP_CREDENTIAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appCredentialId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new expireMyToken_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new expireMyToken_argsTupleSchemeFactory());
    }

    public int appCredentialId; // required
    public String token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_CREDENTIAL_ID((short)1, "appCredentialId"),
      TOKEN((short)2, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_CREDENTIAL_ID
            return APP_CREDENTIAL_ID;
          case 2: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPCREDENTIALID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_CREDENTIAL_ID, new org.apache.thrift.meta_data.FieldMetaData("appCredentialId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(expireMyToken_args.class, metaDataMap);
    }

    public expireMyToken_args() {
    }

    public expireMyToken_args(
      int appCredentialId,
      String token)
    {
      this();
      this.appCredentialId = appCredentialId;
      setAppCredentialIdIsSet(true);
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public expireMyToken_args(expireMyToken_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.appCredentialId = other.appCredentialId;
      if (other.isSetToken()) {
        this.token = other.token;
      }
    }

    public expireMyToken_args deepCopy() {
      return new expireMyToken_args(this);
    }

    @Override
    public void clear() {
      setAppCredentialIdIsSet(false);
      this.appCredentialId = 0;
      this.token = null;
    }

    public int getAppCredentialId() {
      return this.appCredentialId;
    }

    public expireMyToken_args setAppCredentialId(int appCredentialId) {
      this.appCredentialId = appCredentialId;
      setAppCredentialIdIsSet(true);
      return this;
    }

    public void unsetAppCredentialId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPCREDENTIALID_ISSET_ID);
    }

    /** Returns true if field appCredentialId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppCredentialId() {
      return EncodingUtils.testBit(__isset_bitfield, __APPCREDENTIALID_ISSET_ID);
    }

    public void setAppCredentialIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPCREDENTIALID_ISSET_ID, value);
    }

    public String getToken() {
      return this.token;
    }

    public expireMyToken_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_CREDENTIAL_ID:
        if (value == null) {
          unsetAppCredentialId();
        } else {
          setAppCredentialId((Integer)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_CREDENTIAL_ID:
        return getAppCredentialId();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_CREDENTIAL_ID:
        return isSetAppCredentialId();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof expireMyToken_args)
        return this.equals((expireMyToken_args)that);
      return false;
    }

    public boolean equals(expireMyToken_args that) {
      if (that == null)
        return false;

      boolean this_present_appCredentialId = true;
      boolean that_present_appCredentialId = true;
      if (this_present_appCredentialId || that_present_appCredentialId) {
        if (!(this_present_appCredentialId && that_present_appCredentialId))
          return false;
        if (this.appCredentialId != that.appCredentialId)
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_appCredentialId = true;
      list.add(present_appCredentialId);
      if (present_appCredentialId)
        list.add(appCredentialId);

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      return list.hashCode();
    }

    @Override
    public int compareTo(expireMyToken_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppCredentialId()).compareTo(other.isSetAppCredentialId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppCredentialId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appCredentialId, other.appCredentialId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("expireMyToken_args(");
      boolean first = true;

      sb.append("appCredentialId:");
      sb.append(this.appCredentialId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class expireMyToken_argsStandardSchemeFactory implements SchemeFactory {
      public expireMyToken_argsStandardScheme getScheme() {
        return new expireMyToken_argsStandardScheme();
      }
    }

    private static class expireMyToken_argsStandardScheme extends StandardScheme<expireMyToken_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, expireMyToken_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_CREDENTIAL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.appCredentialId = iprot.readI32();
                struct.setAppCredentialIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, expireMyToken_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(APP_CREDENTIAL_ID_FIELD_DESC);
        oprot.writeI32(struct.appCredentialId);
        oprot.writeFieldEnd();
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class expireMyToken_argsTupleSchemeFactory implements SchemeFactory {
      public expireMyToken_argsTupleScheme getScheme() {
        return new expireMyToken_argsTupleScheme();
      }
    }

    private static class expireMyToken_argsTupleScheme extends TupleScheme<expireMyToken_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, expireMyToken_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppCredentialId()) {
          optionals.set(0);
        }
        if (struct.isSetToken()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAppCredentialId()) {
          oprot.writeI32(struct.appCredentialId);
        }
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, expireMyToken_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.appCredentialId = iprot.readI32();
          struct.setAppCredentialIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
      }
    }

  }

  public static class expireMyToken_result implements org.apache.thrift.TBase<expireMyToken_result, expireMyToken_result._Fields>, java.io.Serializable, Cloneable, Comparable<expireMyToken_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("expireMyToken_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new expireMyToken_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new expireMyToken_resultTupleSchemeFactory());
    }

    public ResponseObj success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResponseObj.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(expireMyToken_result.class, metaDataMap);
    }

    public expireMyToken_result() {
    }

    public expireMyToken_result(
      ResponseObj success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public expireMyToken_result(expireMyToken_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResponseObj(other.success);
      }
    }

    public expireMyToken_result deepCopy() {
      return new expireMyToken_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResponseObj getSuccess() {
      return this.success;
    }

    public expireMyToken_result setSuccess(ResponseObj success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResponseObj)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof expireMyToken_result)
        return this.equals((expireMyToken_result)that);
      return false;
    }

    public boolean equals(expireMyToken_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(expireMyToken_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("expireMyToken_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class expireMyToken_resultStandardSchemeFactory implements SchemeFactory {
      public expireMyToken_resultStandardScheme getScheme() {
        return new expireMyToken_resultStandardScheme();
      }
    }

    private static class expireMyToken_resultStandardScheme extends StandardScheme<expireMyToken_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, expireMyToken_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResponseObj();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, expireMyToken_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class expireMyToken_resultTupleSchemeFactory implements SchemeFactory {
      public expireMyToken_resultTupleScheme getScheme() {
        return new expireMyToken_resultTupleScheme();
      }
    }

    private static class expireMyToken_resultTupleScheme extends TupleScheme<expireMyToken_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, expireMyToken_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, expireMyToken_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResponseObj();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
